#!/usr/bin/env ruby

require 'rubygems' if RUBY_VERSION =~ /1\.8/
require 'bundler/setup'
require 'slop'

opts = Slop.parse!(:help => true) do
  banner "Usage: #{File.basename(__FILE__)} [options] <message>"

  on :c, :config, 'Use the specified (YAML) config file', :optional => false

  on :debug, 'Enable debugging'

  on :m, :message, 'Body of the post'
  on :t, :title,   'Title of the post'

  on :version, 'Print the version' do
    STDOUT.puts "Ping.fm v#{Pingfm::VERSION}"
    exit
  end
end

if ARGV.empty?
  STDERR.puts "Must provide a message."
  STDERR.puts # spacer
  STDERR.puts opts.help
  exit
end

# Join ARGV just in case the user didn't quote the message.
message = ARGV.join(' ')

begin
  if opts.config?
    keys = Pingfm::Keyloader.new(opts[:config])
  else
    keys = Pingfm::Keyloader.new
  end
rescue Pingfm::KeyloadingError => error
  STDERR.puts error
  exit 1
end

client = Pingfm::Client.new(keys.app_key)

STDOUT.puts "-- DEBUG: opts: #{opts.to_hash.inspect}"
STDOUT.puts "-- DEBUG: ARGV: #{ARGV.inspect}"
STDOUT.puts "-- DEBUG: message: #{message.inspect}"
STDOUT.puts "-- DEBUG: keys: #{keys.inspect}"
STDOUT.puts "-- DEBUG: client: #{client.inspect}"

return 0 # DEBUG

# TODO: Rewrite this POS.
puts "The 'pingfm' binary will be rewritten as soon as the library is."
exit

require File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'pingfm'))

keyloader = ::Pingfm::Keyloader.new
unless keyloader.has_keys?
  keyloader.api_key = API_KEY
  print 'Enter your Ping.fm User API key (http://ping.fm/key/): '
  keyloader.app_key = STDIN.gets.chomp
  keyloader.save
end

# post message from ARGV

pingfm = ::Pingfm::Client.new(keyloader.api_key, keyloader.app_key)

s = pingfm.validate
if s['status'] == 'OK'
  status = ARGV.join(' ')

  # Might be a good idea to throw an exception here, instead of just bailing.
  if status.nil? || status.empty?
    puts 'Must provide a message to send.'
    exit
  end

  post_result = pingfm.post(status)

  if post_result['status'] == 'FAIL'
    puts post_result['message']
  else
    puts 'Message sent.'
  end
else
  puts s['message']
end
